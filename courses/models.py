"""
Models necessary to represent a course catalog.
"""
import uuid as pyuuid

from django.db import models
from django.contrib.auth.models import User
from django.utils.encoding import python_2_unicode_compatible
from jsonfield import JSONField


@python_2_unicode_compatible
class EdxAuthor(models.Model):
    """
    Represents an author on edX.
    """
    edx_uid = models.CharField(
        max_length=32, unique=True,
        help_text="Unique ID generated by the edx-platform")

    def __repr__(self):
        return "<EdxAuthor edx_uid={}>".format(self.edx_uid)

    def __str__(self):
        return self.edx_uid


@python_2_unicode_compatible
class Course(models.Model):
    """
    An edX course which is purchasable.
    """
    uuid = models.UUIDField(default=pyuuid.uuid4, editable=False)
    title = models.CharField(max_length=255)
    # If course_id lookup is slow, we can hash the contents to do the lookup
    course_id = models.TextField(help_text="course locator from edx", unique=True)
    author_name = models.CharField(max_length=255, blank=True, null=True)
    overview = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    image_url = models.URLField()
    instructors = models.ManyToManyField(EdxAuthor)

    edx_instance = models.ForeignKey('oauth_mgmt.BackingInstance', null=True)
    live = models.BooleanField(default=False)

    deleted = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True, blank=True)
    updated_at = models.DateTimeField(auto_now=True, blank=True)

    def __str__(self):
        return self.title

    def to_webhook(self):
        """
        Webhook serialization
        """
        return {
            'title': self.title,
            'external_pk': str(self.uuid),
            'instance': self.edx_instance.instance_url,
        }


@python_2_unicode_compatible
class Module(models.Model):
    """
    Represents a purchasable 'chapter' of a course.
    """
    uuid = models.UUIDField(default=pyuuid.uuid4, editable=False)
    course = models.ForeignKey(Course)
    title = models.CharField(max_length=255)
    subchapters = JSONField(default=tuple())  # Array of strings.
    locator_id = models.CharField(max_length=255)
    order = models.IntegerField(default=0)

    class Meta:  # pylint: disable=missing-docstring
        ordering = ('course_id', 'order')

    def __str__(self):
        return self.title

    def to_webhook(self):
        """
        Webhook serialization
        """
        return {
            'title': self.title,
            'external_pk': str(self.uuid),
            'subchapters': self.subchapters,
            'course_external_pk': str(self.course.uuid),
            'instance': self.course.edx_instance.instance_url,
        }


@python_2_unicode_compatible
class UserInfo(models.Model):
    """
    Additional information for a given user.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='info')
    edx_instance = models.ForeignKey('oauth_mgmt.BackingInstance', blank=True, null=True)

    def __str__(self):
        return "Profile for {}".format(self.user)
